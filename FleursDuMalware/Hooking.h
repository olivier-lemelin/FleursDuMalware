#pragma once

#include "Global.h"
#include <Windows.h>
#include <tlhelp32.h>
#include <winnt.h>
#include <list>
#include <string>
#include <psapi.h>

struct FunctionWithName {
    std::string name;
    DWORD64 startAddr = 0;
    int ordinal = 0;
    DWORD syscallId = 0;
};

bool checkJmpHooked(char* name, DWORD* address, BOOL bNt);
std::list<FunctionWithName> getListOfExport(HMODULE libraryStartAddr);
int unhookDllWithDllOverwrite(char* moduleName = (char*)"ntdll.dll", char* dllFilePath = (char*)"c:\\windows\\system32\\ntdll.dll");
std::list<FunctionWithName> getListOfHookedFunctions(std::list<FunctionWithName> funcList, bool checkOnlyNt = true);
std::list<FunctionWithName> getListOfHookedFunctions(HMODULE libraryStartAddr, bool checkOnlyNt = true);
VOID patchHook(LPVOID address, int syscallId);
void unhookFunctions(std::list<FunctionWithName> lstFunctionsToUnhook);
