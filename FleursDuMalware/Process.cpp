#include "Process.h"

HANDLE process_open(int pid, long accessRights) {
	HANDLE hProc = OpenProcess(accessRights, false, pid);
	PRINT_DEBUG("Opening process handle: %p\n", hProc);
	return hProc;
}

void process_close_handle(HANDLE hProc) {
	PRINT_DEBUG("Closing process handle %p\n", hProc);
	CloseHandle(hProc);
}

int spawn_process(char* cmdline) {
    STARTUPINFOA si;
    PROCESS_INFORMATION pi;

    ZeroMemory(&si, sizeof(si));
    si.cb = sizeof(si);
    ZeroMemory(&pi, sizeof(pi));

    // Start the child process. 
    if (!CreateProcessA(NULL,   // No module name (use command line)
        cmdline,        // Command line
        NULL,           // Process handle not inheritable
        NULL,           // Thread handle not inheritable
        FALSE,          // Set handle inheritance to FALSE
        0,              // No creation flags
        NULL,           // Use parent's environment block
        NULL,           // Use parent's starting directory 
        &si,            // Pointer to STARTUPINFO structure
        &pi)           // Pointer to PROCESS_INFORMATION structure
        )
    {
        PRINT_DEBUG("CreateProcess failed (%d).\n", GetLastError());
        return -1;
    }

    // Wait until child process exits.
    //WaitForSingleObject(pi.hProcess, INFINITE);

    

    PRINT_DEBUG("Spawned new process '%s' with PID %d.\n", cmdline, pi.dwProcessId);

    // Close process and thread handles. 
    CloseHandle(pi.hProcess);
    CloseHandle(pi.hThread);

    return pi.dwProcessId;
}